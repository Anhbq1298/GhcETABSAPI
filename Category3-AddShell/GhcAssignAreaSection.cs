// -------------------------------------------------------------
// Component : ETABS Assign Area Section (AreaObj.SetProperty)
// Author    : Generated by OpenAI assistant
// Target    : Rhino 7/8 + Grasshopper, .NET Framework 4.8 (x64)
// Depends   : Grasshopper, ETABSv1 (COM)
// Panel     : "MGT" / "3.0 Area Object Modelling"
// -------------------------------------------------------------
//
// Inputs (ordered):
//   0) add         (bool, item)     Rising-edge trigger (Falseâ†’True executes).
//   1) sapModel    (ETABSv1.cSapModel, item)  ETABS model from Attach component.
//   2) areaNames   (string, list)   ETABS area object names or groups to update.
//   3) sectionNames(string, list)   Area section property names. Provide one item to broadcast
//                                   to all areas, or supply a list; if it runs short, the last
//                                   valid section is assumed for remaining areas.
//
// Outputs:
//   0) msg         (string, item)   Summary / status message.
//
// Behavior Notes:
//   + Rising-edge execution only (stores last trigger/message per component instance).
//   + sectionNames may contain 1 item (broadcast) or run shorter than areaNames; in the latter
//     case the last valid section provided is reused for remaining assignments.
//   + Blank / whitespace area names are ignored (do not count toward total attempts).
//   + To clear an assignment, provide the literal string "None" as the section name (case-insensitive).
// -------------------------------------------------------------

using System;
using System.Collections.Generic;
using Grasshopper.Kernel;
using ETABSv1;
using System.Windows.Forms;

namespace MGT
{
    public class GhcAssignAreaSection : GH_Component
    {
        private bool _lastAdd = false;
        private string _lastMsg = "Idle.";

        public GhcAssignAreaSection()
          : base(
                "Assign Area Section",
                "ArSetSection",
                "Assign ETABS area objects to section properties via AreaObj.SetProperty.\nDeveloped by Mark Bui Quang Anh - Mark.Bui@meinhardtgroup.com",
                "MGT",
                "3.0 Area Object Modelling")
        { }

        public override Guid ComponentGuid => new Guid("f15e5c3f-175f-4b33-a5a2-0c7c2df07c7d");

        protected override System.Drawing.Bitmap Icon => null;

        protected override void RegisterInputParams(GH_InputParamManager p)
        {
            p.AddBooleanParameter("add", "add", "Rising-edge trigger; executes when this turns True.", GH_ParamAccess.item, false);
            p.AddGenericParameter("sapModel", "sapModel", "ETABS cSapModel from your Attach component.", GH_ParamAccess.item);
            p.AddTextParameter(
                "areaNames",
                "areaNames",
                "ETABS area object or group names to assign. Blank/whitespace names are ignored.",
                GH_ParamAccess.list);
            p.AddTextParameter(
                "sectionNames",
                "sectionNames",
                "Area section property names. Provide 1 item to broadcast or a list; if it is shorter than areaNames the last valid section is reused.",
                GH_ParamAccess.list);
        }

        protected override void RegisterOutputParams(GH_OutputParamManager p)
        {
            p.AddTextParameter("msg", "msg", "Summary / status message.", GH_ParamAccess.item);
        }

        protected override void SolveInstance(IGH_DataAccess da)
        {
            bool add = false;
            cSapModel sapModel = null;
            List<string> areaNames = new List<string>();
            List<string> sectionNames = new List<string>();

            if (!da.GetData(0, ref add)) add = false;
            if (!da.GetData(1, ref sapModel)) sapModel = null;
            da.GetDataList(2, areaNames);
            da.GetDataList(3, sectionNames);

            bool risingEdge = (!_lastAdd && add);
            if (!risingEdge)
            {
                da.SetData(0, _lastMsg);
                _lastAdd = add;
                return;
            }

            string notification = string.Empty;

            try
            {
                if (sapModel == null) throw new Exception("sapModel is null.");
                if (areaNames == null || areaNames.Count == 0) throw new Exception("areaNames list is empty.");
                if (sectionNames == null || sectionNames.Count == 0) throw new Exception("sectionNames list is empty.");

                int totalAttempts = 0;
                int success = 0;
                int failures = 0;
                bool reusedSectionForRemaining = false;
                bool broadcast = sectionNames.Count == 1;
                string lastValidSection = null;

                for (int i = 0; i < areaNames.Count; i++)
                {
                    string area = areaNames[i];
                    if (string.IsNullOrWhiteSpace(area))
                    {
                        continue;
                    }

                    string section;
                    if (broadcast)
                    {
                        section = sectionNames[0];
                    }
                    else if (i < sectionNames.Count)
                    {
                        section = sectionNames[i];
                    }
                    else
                    {
                        section = lastValidSection ?? (sectionNames.Count > 0 ? sectionNames[sectionNames.Count - 1] : null);
                        if (!string.IsNullOrWhiteSpace(section))
                        {
                            reusedSectionForRemaining = true;
                        }
                    }

                    if (string.IsNullOrWhiteSpace(section))
                    {
                        continue;
                    }

                    section = NormalizeSection(section);
                    lastValidSection = section;

                    totalAttempts++;
                    int ret = sapModel.AreaObj.SetProperty(area.Trim(), section, eItemType.Objects);
                    if (ret == 0)
                    {
                        success++;
                    }
                    else
                    {
                        failures++;
                    }
                }

                if (totalAttempts == 0)
                {
                    _lastMsg = "No valid area/section pairs to assign.";
                }
                else
                {
                    string suffix = broadcast && !string.IsNullOrWhiteSpace(sectionNames[0])
                        ? $" (section '{NormalizeSection(sectionNames[0])}')"
                        : string.Empty;
                    _lastMsg = $"{success}/{totalAttempts} area sections assigned{suffix}.";
                    if (failures > 0)
                    {
                        _lastMsg += $" {failures} failure(s).";
                    }
                    if (reusedSectionForRemaining)
                    {
                        _lastMsg += " Section list shorter than assignments; last valid section reused for remaining areas.";
                    }
                }

                try
                {
                    sapModel.View.RefreshView(0, false);
                }
                catch
                {
                    // Ignore refresh failures
                }

                notification = _lastMsg;
            }
            catch (Exception ex)
            {
                _lastMsg = "Error: " + ex.Message;
                notification = _lastMsg;
            }

            da.SetData(0, _lastMsg);
            _lastAdd = add;

            if (!string.IsNullOrEmpty(notification))
            {
                try
                {
                    MessageBox.Show(notification, "ETABS Assign Area Section", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch
                {
                    // Swallow any exception from UI notifications to avoid breaking SolveInstance.
                }
            }
        }

        private static string NormalizeSection(string section)
        {
            if (section == null)
            {
                return null;
            }

            string trimmed = section.Trim();
            if (trimmed.Equals("none", StringComparison.OrdinalIgnoreCase))
            {
                return "None";
            }

            return trimmed;
        }
    }
}
