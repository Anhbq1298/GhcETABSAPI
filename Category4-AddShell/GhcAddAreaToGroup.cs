// -------------------------------------------------------------
// Component : ETABS Add Areas to Group (AreaObj.SetGroupAssign)
// Author    : Generated by OpenAI assistant
// Target    : Rhino 7/8 + Grasshopper, .NET Framework 4.8 (x64)
// Depends   : Grasshopper, ETABSv1 (COM)  [Embed Interop Types = False]
// Panel     : "MGT" / "3.0 Area Object Modelling"
// -------------------------------------------------------------
//
// Inputs (ordered):
//   0) add        (bool, item)      Rising-edge trigger
//   1) sapModel   (ETABSv1.cSapModel, item)  ETABS model
//   2) groupName  (string, item)    Target group name (must already exist in ETABS)
//   3) areaNames  (string, list)    ETABS area object names to assign/remove
//                                   NOTE: This list MUST already be unique upstream.
//                                         The component does NOT de-duplicate; blank/whitespace names are ignored.
//
// Outputs:
//   0) msg        (string, item)    Summary message, e.g. "5/6 areas assigned to 'MyGroup'."
//
// Behavior Notes:
//   + Assigns each area via AreaObj.SetGroupAssign(areaName, groupName, removeFlag, eItemType.Objects).
//   + Success counted by ETABS return code (0 = success). No model scans or group listing.
//   + Rising-edge execution only (Falseâ†’True on 'add'); replays last message otherwise.
// -------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Drawing;
using Grasshopper.Kernel;
using ETABSv1;

namespace MGT
{
    public class GhcAddAreaToGroup : GH_Component
    {
        private bool _lastAdd = false;
        private string _lastMsg = "Idle";

        public GhcAddAreaToGroup()
          : base(
                "Add Areas to Group",
                "ArToGroup",
                "Add ETABS area objects to an existing group via AreaObj.SetGroupAssign.\nDeveloped by Mark Bui Quang Anh - Mark.Bui@meinhardtgroup.com",
                "MGT",
                "3.0 Area Object Modelling")
        { }

        public override Guid ComponentGuid => new Guid("E5E0D4A1-8A9E-4B7E-9136-1A6E0F119F21");

        protected override Bitmap Icon => null;

        protected override void RegisterInputParams(GH_InputParamManager p)
        {
            p.AddBooleanParameter("add", "add", "Rising-edge trigger; executes when this turns True.", GH_ParamAccess.item, false);
            p.AddGenericParameter("sapModel", "sapModel", "ETABS cSapModel from your Attach component.", GH_ParamAccess.item);
            p.AddTextParameter("groupName", "groupName", "Target ETABS group name. Must exist in the active model.", GH_ParamAccess.item, "GH_Areas");
            p.AddTextParameter(
                "areaNames",
                "areaNames",
                "ETABS area object names to assign. IMPORTANT: This list must already be unique upstream; the component does not de-duplicate. Blank/whitespace items are ignored.",
                GH_ParamAccess.list
            );
            p.AddBooleanParameter("remove", "remove", "True = remove the listed areas from the group instead of adding them.", GH_ParamAccess.item, false);
        }

        protected override void RegisterOutputParams(GH_OutputParamManager p)
        {
            p.AddTextParameter("msg", "msg", "Summary of the assignment/removal outcome.", GH_ParamAccess.item);
        }

        protected override void SolveInstance(IGH_DataAccess DA)
        {
            bool add = false;
            cSapModel sapModel = null;
            string groupName = null;
            List<string> areaNames = new List<string>();
            bool removeFlag = false;

            if (!DA.GetData(0, ref add)) add = false;
            if (!DA.GetData(1, ref sapModel)) sapModel = null;
            if (!DA.GetData(2, ref groupName)) groupName = null;
            DA.GetDataList(3, areaNames);
            if (!DA.GetData(4, ref removeFlag)) removeFlag = false;

            if (!(_lastAdd == false && add == true))
            {
                DA.SetData(0, _lastMsg);
                _lastAdd = add;
                return;
            }

            string targetGroup = (groupName ?? string.Empty).Trim();
            string areaStatus = removeFlag ? "removed" : "assigned";
            int attempts = 0;
            int success = 0;

            try
            {
                if (sapModel == null) throw new Exception("sapModel is null.");
                if (string.IsNullOrWhiteSpace(targetGroup)) throw new Exception("groupName is empty.");

                for (int i = 0; i < areaNames.Count; i++)
                {
                    string nm = areaNames[i];
                    if (string.IsNullOrWhiteSpace(nm)) continue;
                    attempts++;
                    int ret = sapModel.AreaObj.SetGroupAssign(nm.Trim(), targetGroup, removeFlag, eItemType.Objects);
                    if (ret == 0) success++;
                }

                if (attempts == 0)
                {
                    _lastMsg = "No valid area names provided.";
                }
                else
                {
                    _lastMsg = $"{success}/{attempts} areas {areaStatus} {(removeFlag ? "from" : "to")} '{targetGroup}'.";
                }
            }
            catch (Exception ex)
            {
                _lastMsg = "Error: " + ex.Message;
            }

            DA.SetData(0, _lastMsg);
            _lastAdd = add;
        }
    }
}
