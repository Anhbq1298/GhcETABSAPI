// -------------------------------------------------------------
// Component : Set Load Uniform On Areas (AreaObj.SetLoadUniform)
// Author    : Generated by OpenAI assistant
// Target    : Rhino 7/8 + Grasshopper, .NET Framework 4.8 (x64)
// Depends   : Grasshopper, ETABSv1 (COM)
// Panel     : "MGT" / "3.0 Area Object Modelling"
// -------------------------------------------------------------
// Inputs (ordered):
//   0) run         (bool, item)   Rising-edge trigger (False→True executes).
//   1) sapModel    (ETABSv1.cSapModel, item)  ETABS model reference.
//   2) shellNames  (string, list) Area object names to assign to. Index order is preserved.
//   3) loadPat     (string, item) Load pattern name applied to all shells.
//   4) dirCode     (int, item)    ETABS direction code (1..11).
//   5) values      (double, list) Per-shell uniform load magnitudes. If the list is shorter
//                                  than shellNames, remaining shells are skipped.
//   6) replaceMode (bool, item)   Replace flag passed straight to ETABS.
//
// Outputs:
//   0) message     (string, item) Summary / diagnostics (latched between triggers).
// -------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using Grasshopper.Kernel;
using ETABSv1;
using static MGT.ComponentShared;

namespace MGT
{
    public class GhcSetLoadUniformOnAreas : GH_Component
    {
        private const string IdleMessage = "Idle.";

        private bool _lastRun;
        private string _lastMessage = IdleMessage;

        public GhcSetLoadUniformOnAreas()
          : base(
                "Set Load Uniform On Areas",
                "AreaUDL",
                "Assign uniform surface loads to ETABS area objects (per-object mode).\nDeveloped by Mark Bui Quang Anh - Mark.Bui@meinhardtgroup.com",
                "MGT",
                "3.0 Area Object Modelling")
        {
        }

        public override Guid ComponentGuid => new Guid("b5f0ae45-1fa7-47fb-a46d-2437d37f8a8e");

        protected override System.Drawing.Bitmap Icon => null;

        protected override void RegisterInputParams(GH_InputParamManager p)
        {
            p.AddBooleanParameter("run", "run", "Rising-edge trigger; executes when switched to True.", GH_ParamAccess.item, false);
            p.AddGenericParameter("sapModel", "sapModel", "ETABS cSapModel from the Attach component.", GH_ParamAccess.item);
            p.AddTextParameter(
                "shellNames",
                "shellNames",
                "Area object names to assign. Blank names are treated as missing.",
                GH_ParamAccess.list);
            p.AddTextParameter(
                "loadPat",
                "loadPat",
                "Load pattern applied to every shell.",
                GH_ParamAccess.item,
                string.Empty);
            p.AddIntegerParameter(
                "dirCode",
                "dirCode",
                "ETABS direction code (1..11).",
                GH_ParamAccess.item,
                10);
            p.AddNumberParameter(
                "values",
                "values",
                "Uniform load magnitudes per shell (index aligned with shellNames).",
                GH_ParamAccess.list);
            p.AddBooleanParameter(
                "replaceMode",
                "replaceMode",
                "Replace existing assignments.",
                GH_ParamAccess.item,
                true);
        }

        protected override void RegisterOutputParams(GH_OutputParamManager p)
        {
            p.AddTextParameter("message", "message", "Summary / diagnostic message.", GH_ParamAccess.item);
        }

        protected override void SolveInstance(IGH_DataAccess da)
        {
            bool run = false;
            cSapModel sapModel = null;
            List<string> rawShellNames = new List<string>();
            string loadPattern = string.Empty;
            int dirCode = 0;
            List<double> values = new List<double>();
            bool replaceMode = false;

            da.GetData(0, ref run);
            da.GetData(1, ref sapModel);
            da.GetDataList(2, rawShellNames);
            da.GetData(3, ref loadPattern);
            da.GetData(4, ref dirCode);
            da.GetDataList(5, values);
            da.GetData(6, ref replaceMode);

            bool rising = !_lastRun && run;
            if (!rising)
            {
                da.SetData(0, _lastMessage);
                _lastRun = run;
                return;
            }

            string message;

            try
            {
                if (sapModel == null)
                {
                    throw new InvalidOperationException("sapModel is null.");
                }

                if (rawShellNames == null || rawShellNames.Count == 0)
                {
                    throw new InvalidOperationException("shellNames list is empty.");
                }

                if (string.IsNullOrWhiteSpace(loadPattern))
                {
                    throw new InvalidOperationException("loadPat is empty.");
                }

                if (values == null)
                {
                    throw new InvalidOperationException("values list is null.");
                }

                if (dirCode < 1 || dirCode > 11)
                {
                    throw new InvalidOperationException($"dirCode must be 1..11 (received {dirCode}).");
                }

                HashSet<string> existing = TryGetExistingAreaNames(sapModel);
                if (existing == null)
                {
                    throw new InvalidOperationException("Failed to query area object names from ETABS.");
                }

                List<string> shellNames = new List<string>(rawShellNames.Count);
                for (int i = 0; i < rawShellNames.Count; i++)
                {
                    string nm = rawShellNames[i];
                    shellNames.Add(nm == null ? string.Empty : nm.Trim());
                }

                string csys = ResolveDirectionReferenceArea(dirCode);
                bool replace = replaceMode;

                List<string> assigned = new List<string>();
                List<string> skippedNoValue = new List<string>();
                List<string> notFound = new List<string>();
                List<string> errors = new List<string>();

                for (int i = 0; i < shellNames.Count; i++)
                {
                    string shell = shellNames[i];
                    string label = FormatLabel(i, shell);

                    if (string.IsNullOrEmpty(shell) || !existing.Contains(shell))
                    {
                        notFound.Add(label);
                        continue;
                    }

                    double? maybeValue = TryGet(values, i);
                    if (!maybeValue.HasValue)
                    {
                        skippedNoValue.Add(label);
                        continue;
                    }

                    double value = maybeValue.Value;
                    if (IsInvalidNumber(value))
                    {
                        errors.Add(label + " (invalid magnitude)");
                        continue;
                    }

                    int ret = sapModel.AreaObj.SetLoadUniform(
                        shell,
                        loadPattern,
                        value,
                        dirCode,
                        replace,
                        csys,
                        eItemType.Objects);

                    if (ret == 0)
                    {
                        assigned.Add(label);
                    }
                    else
                    {
                        errors.Add(label);
                    }
                }

                TryRefreshView(sapModel);

                message = BuildSummary(shellNames.Count, assigned, skippedNoValue, notFound, errors, dirCode, csys, replace, loadPattern);
            }
            catch (Exception ex)
            {
                message = "Error: " + ex.Message;
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, ex.Message);
            }

            _lastMessage = message;
            _lastRun = run;
            da.SetData(0, _lastMessage);
        }

        private static string FormatLabel(int index, string name)
        {
            string display = string.IsNullOrWhiteSpace(name) ? "(blank)" : name;
            return $"#{index}:{display}";
        }

        private static string BuildSummary(
            int total,
            List<string> assigned,
            List<string> skipped,
            List<string> missing,
            List<string> errors,
            int dirCode,
            string csys,
            bool replace,
            string loadPattern)
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"Assigned: {assigned.Count} / {total}");
            sb.AppendLine($"Skipped (no value): {skipped.Count} → {JoinOrNone(skipped)}");
            sb.AppendLine($"Not found: {missing.Count} → {JoinOrNone(missing)}");
            sb.AppendLine($"Errors (ETABS): {errors.Count} → {JoinOrNone(errors)}");
            sb.Append($"Dir={dirCode} ({csys}), Replace={replace}, LoadPat='{loadPattern}'");
            return sb.ToString();
        }

        private static string JoinOrNone(List<string> entries)
        {
            if (entries == null || entries.Count == 0)
            {
                return "None";
            }

            return string.Join(", ", entries);
        }

    }
}

